{"ast":null,"code":"var _jsxFileName = \"/Users/nklsstlr/work/github/codenames/client/src/components/OnlinePlayersAutonomous/OnlinePlayersAutonomous.js\";\nimport React, { useState, useEffect } from \"react\";\n\nclass OnlinePlayersAutonomous extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [],\n      isLoaded: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n    this.timer = setInterval(() => this.fetchUsers(), 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n    this.timer = null;\n  }\n\n  fetchUsers() {\n    fetch(\"http://localhost:3002/users\").then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        users: result.response\n      });\n    });\n  }\n\n  render() {\n    const {\n      users\n    } = this.state;\n\n    if (!this.state.isLoaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 14\n        }\n      }, \"Loading ... \");\n    } else {\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }, users.map(user => /*#__PURE__*/React.createElement(\"li\", {\n        key: user.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }\n      }, user.name))));\n    }\n  }\n\n}\n\nexport default OnlinePlayersAutonomous;","map":{"version":3,"sources":["/Users/nklsstlr/work/github/codenames/client/src/components/OnlinePlayersAutonomous/OnlinePlayersAutonomous.js"],"names":["React","useState","useEffect","OnlinePlayersAutonomous","Component","constructor","props","state","users","isLoaded","componentDidMount","fetchUsers","timer","setInterval","componentWillUnmount","clearInterval","fetch","then","res","json","result","setState","response","render","map","user","id","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,uBAAN,SAAsCH,KAAK,CAACI,SAA5C,CAAsD;AACpDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAID;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL;AACA,SAAKC,KAAL,GAAaC,WAAW,CAAC,MAAM,KAAKF,UAAL,EAAP,EAA0B,IAA1B,CAAxB;AACD;;AACDG,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,aAAa,CAAC,KAAKH,KAAN,CAAb;AACA,SAAKA,KAAL,GAAa,IAAb;AACD;;AAEDD,EAAAA,UAAU,GAAG;AACXK,IAAAA,KAAK,CAAC,6BAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,MAAD,IAAY;AAChB,WAAKC,QAAL,CAAc;AACZZ,QAAAA,QAAQ,EAAE,IADE;AAEZD,QAAAA,KAAK,EAAEY,MAAM,CAACE;AAFF,OAAd;AAID,KAPH;AAQD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEf,MAAAA;AAAF,QAAY,KAAKD,KAAvB;;AACA,QAAI,CAAC,KAAKA,KAAL,CAAWE,QAAhB,EAA0B;AACxB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD,KAFD,MAEO;AACL,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,KAAK,CAACgB,GAAN,CAAWC,IAAD,iBACT;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,IAAI,CAACE,IAAV,CADF,CADD,CADH,CADF;AASD;AACF;;AA5CmD;;AA8CtD,eAAexB,uBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nclass OnlinePlayersAutonomous extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [],\n      isLoaded: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n    this.timer = setInterval(() => this.fetchUsers(), 5000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timer);\n    this.timer = null;\n  }\n\n  fetchUsers() {\n    fetch(\"http://localhost:3002/users\")\n      .then((res) => res.json())\n      .then((result) => {\n        this.setState({\n          isLoaded: true,\n          users: result.response,\n        });\n      });\n  }\n\n  render() {\n    const { users } = this.state;\n    if (!this.state.isLoaded) {\n      return <div>Loading ... </div>;\n    } else {\n      return (\n        <ul>\n          {users.map((user) => (\n            <li key={user.id}>\n              <h3>{user.name}</h3>\n            </li>\n          ))}\n        </ul>\n      );\n    }\n  }\n}\nexport default OnlinePlayersAutonomous;\n"]},"metadata":{},"sourceType":"module"}